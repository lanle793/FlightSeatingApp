
public class SeatingHandler {
	private SeatCollection seatCollection;
	private Row[] rowToFind;
	private Seat[] seatToFind;
	static boolean found = false;
	
	public SeatingHandler(SeatCollection seatCollection){
		this.seatCollection = seatCollection;
	}
	
	public SeatCollection getSeatCollection(){
		return seatCollection;
	}
	
	public void handleRequest(Customer cus){ //precondition: seatingCollection is not full
		if(!seatCollection.isAvbl()) return;
		if(cus.getRequestType().equalsIgnoreCase("S")){
			SelectRequest request = (SelectRequest)cus.getRequest();
			if(request.getConsecutive().equalsIgnoreCase("S")){
				if(request.getPreference().equalsIgnoreCase("Y")){
					if(request.getBusOrEco().equalsIgnoreCase("B")) 
						rowToFind = seatCollection.getBusRow();
					else rowToFind = seatCollection.getEcoRow();
					for(int i = 0; i < rowToFind.length; i++){
						if(rowToFind[i].checkAvbl()){
							seatToFind = rowToFind[i].getSeats();
							for(int j = 0; j < seatToFind.length; j++){
								if(seatToFind[j].getAisleOrWindow().equals(request.getAisleOrWindow())){
									seatToFind[j].changeAvbl();
									seatToFind[j].setCus(cus);
									rowToFind[i].lessNumAvblSeat(1);
									found = true;
									break;
								}
							}
						}
					}
				}
				else{
					rowToFind = seatCollection.getEcoRow();
					for(int i = 0; i < rowToFind.length; i++){
						if(rowToFind[i].checkAvbl()){
							seatToFind = rowToFind[i].getSeats();
							for(int j = 0; j < seatToFind.length; j++){
								if(seatToFind[j].isAvbl()){
									seatToFind[j].changeAvbl();
									seatToFind[j].setCus(cus);
									rowToFind[i].lessNumAvblSeat(1);
									found = true;
									break;
								}
							}
						}
					}
				}
			}
			else{
				rowToFind = seatCollection.getEcoRow();
				for(int i = 0; i < rowToFind.length; i++){
					if(request.getNumOfSeats() <= rowToFind[i].getRowCap()/2 && request.getNumOfSeats() <= rowToFind[i].getNumAvblSeat()){
						//need implementation here
					}
				}
			}
		}
		else{
			CancelRequest request = (CancelRequest)cus.getRequest();
			rowToFind = seatCollection.getBusRow();
			cancelSeating(rowToFind, request);
			if(!found) rowToFind = seatCollection.getEcoRow();
			cancelSeating(rowToFind, request);
		}
	}
	
	public void cancelSeating(Row[] rowToFind, CancelRequest request){
		for(int i = 0; i < rowToFind.length; i++){
			if(rowToFind[i].getRowNum() == request.rowNum){
				seatToFind = rowToFind[i].getSeats();
				for(int j = 0; j < seatToFind.length; j++){
					if(seatToFind[j].getSeatNum() == request.seatNum){
						seatToFind[j].changeAvbl();
						seatToFind[j].setCus(null);
						rowToFind[i].plusNumAvblSeat(1);
						found = true;
						break;
					}
				}
			}
		}
	}
}
